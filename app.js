
const { connection, bot } = require('./token.js'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω

connection.connect(function (err) {
    if (err) {
        return console.error("–û—à–∏–±–∫–∞: " + err.message);
    }
    else {
        console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
});

//–ö–æ–º–∞–Ω–¥—ã
const commands = [

    {

        command: "/start",
        description: "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"

    },
    {

        command: "/help",
        description: "–ü–æ–º–æ—â—å"

    },
    {
        command: "/site",
        description: "–ü–æ–ª–µ–∑–Ω—ã–π —Å–∞–π—Ç"

    },
    {
        command: "/creator",
        description: "–ê–≤—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞"

    },
]
bot.setMyCommands(commands);

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (msg.text === '/start') {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, –û–∫—Ç–∞–≥–æ–Ω!');
        sendTime();
    }
    else if (msg.text === '/help') {
        bot.sendMessage(chatId, "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏\n\n<b>help</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n<b>site</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ IT\n<b>creator</b> - —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞\n\n<b>randomItem</b> - —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n<b>deleteItem</b> - —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n<b>getItemByID</b> - –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n", {
            parse_mode: "HTML"
        });
    }
    else if (msg.text === '/site') {
        bot.sendMessage(chatId, `https://students.forus.ru/`, {
            parse_mode: "HTML"
        });
    }
    else if (msg.text === '/creator') {
        bot.sendMessage(chatId, '–í–µ–ª–∏–∫–∞–Ω–æ–≤–∞ –ú–∏–ª–∞ –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞');
    }
    else if (msg.text === '/randomItem') {
        connection.execute("SELECT * FROM items", function (error, results) {
            if (error) {
                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞");
            } else {
                max = results.length;
                min = 1;
                const index = Math.floor(Math.random() * (max - min + 1)) + min;
                const item = results[index];
                bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.descript}`);
            }
        });
    }
    //–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /deleteItem <ID>
    else if (msg.text.includes('/deleteItem')) {
        const id = parseInt(msg.text.split(' ')[1]); // –ü–æ–ª—É—á–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        connection.execute("DELETE FROM items WHERE id=?", [id], function (error, results) {
            if (error) {
                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞");
            } else {
                if (results.affectedRows > 0) {
                    bot.sendMessage(chatId, "–£–¥–∞—á–Ω–æ");
                } else {
                    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞");
                }
            }
        });
    }
    else if (msg.text.includes('/getItemByID')) {
        const id = parseInt(msg.text.split(' ')[1]); // –ü–æ–ª—É—á–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        connection.execute("SELECT * FROM items WHERE id=?", [id], function (error, results, fields) {
            if (error) {
                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞");
            } else {
                if (results && results.length === 1) {
                    const item = results[0];
                    bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.descript}`);
                }
            }
        });
    }

});

//QR-–∫–æ–¥
bot.onText(/^\!qr/, function (msg) {
    console.log(msg);
    var userId = msg.from.id;
    var data = msg.text.substring(3).trim();
    var imageqr = "https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=" + data;
    bot.sendMessage(msg.chat.id, "[‚úèÔ∏è](" + imageqr + ")Qr code de: " + data, { parse_mode: "Markdown" });
});
//–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞
bot.onText(/^\!webscr/, function (msg) {
    console.log(msg);
    var url = msg.text.substring(8).trim();
    var image = "https://api.letsvalidate.com/v1/thumbs/?url=" + url + "&width=1280&height=720";

    var options = {
        parse_mode: "Markdown",
    };
    bot.sendMessage(msg.chat.id, "[üì∑](" + image + ") –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Å–∞–π—Ç–∞: " + url, options);
});

//–ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/.*/, (msg) => {
    const userId = msg.from.id;
    let now = new Date();
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É ISO
    let dateAsIsoString = now.toISOString();
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –±—É–∫–≤—ã 'T'
    let nowDate = dateAsIsoString.slice(0, 10);
    connection.execute("SELECT * FROM users WHERE id=?", [userId], function (error, results, fields) {
        if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞");
        } else {
            if (results && results.length === 1) {
                connection.execute("UPDATE `users` SET `lastMessage` = ? WHERE `users`.`ID` = ?;", [nowDate, userId], function (error, results, fields) {
                    if (error) {
                        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î");
                    }
                });

            } else {
                connection.execute("INSERT INTO `users` (`ID`, `lastMessage`) VALUES (?, ?);", [userId, nowDate], function (error, results, fields) {
                    if (error) {
                        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î");
                    }
                });

            }

        }
    });





});


// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 –ø–æ –ú–æ—Å–∫–≤–µ
const cron = require('cron');
function sendTime() {
    new cron.CronJob('0 13 * * *', // cronTime
        function () {
            const twoDaysAgo = new Date();
            twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

            connection.query("SELECT * FROM users WHERE lastMessage < ?", [twoDaysAgo.toISOString()], function (error, results, fields) {
                if (error) {
                    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞");
                } else {
                    results.forEach((user) => {
                        connection.execute("SELECT * FROM items", function (error, results) {
                            if (error) {
                                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞");
                            } else {
                                max = results.length;
                                min = 1;
                                const index = Math.floor(Math.random() * (max - min + 1)) + min;
                                const item = results[index];
                                bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.descript}`);
                            }
                        });
                    });
                }
            });
        }, // onTick
        null, // onComplete
        true, // start
        'Europe/Moscow' // timeZone
    );
}





// Matches "/echo [whatever]"
bot.onText(/\/echo (.+)/, (msg, match) => {

    const chatId = msg.chat.id;
    const resp = match[1]; // the captured "whatever"

    bot.sendMessage(chatId, resp);
});
